import * as _ from 'lodash';
import { Subject } from 'rxjs';
import { debounceTime, filter, takeUntil } from 'rxjs/operators';
export class OfSchemaModel {
    constructor(config) {
        this.layout = 'vertical';
        this.focusFisrtInit = true;
        this.errorNotValid = 'Vui lòng điền đầy đủ thông tin!';
        this.backUpDisables = {};
        this.render$ = new Subject();
        this.isSearchBox = false;
        this.searchBtnBusy = false;
        this.searchEvent$ = new Subject();
        this.rebuilder$ = new Subject();
        this.submitted = false;
        this.fields = config.fields;
        this.id = Number(new Date());
        this.focusFisrtInit = (config === null || config === void 0 ? void 0 : config.focusFisrtInit) || true;
        this.errorNotValid = (config === null || config === void 0 ? void 0 : config.errorNotValid) || 'Vui lòng điền đầy đủ thông tin!';
        this.isSearchBox = (config === null || config === void 0 ? void 0 : config.isSearchBox) || false;
    }
    get value() {
        var _a;
        return ((_a = this.form) === null || _a === void 0 ? void 0 : _a.getRawValue()) || null;
    }
    get valueValid() {
        var _a;
        if ((_a = this.form) === null || _a === void 0 ? void 0 : _a.valid) {
            return this.value;
        }
        return null;
    }
    getField(name) {
        var _a;
        return ((_a = this.fields) === null || _a === void 0 ? void 0 : _a.find(x => x.dataField === name)) || null;
    }
    getFormControl(name) {
        return this.form.get(name);
    }
    disableField(name, f = true) {
        setTimeout(() => {
            const ctr = this.getFormControl(name);
            if (ctr) {
                if (f) {
                    ctr.disable({ onlySelf: true });
                }
                else {
                    ctr.enable({ onlySelf: true });
                }
            }
            // tslint:disable-next-line:no-shadowed-variable
            const field = this.fields.find((f) => f.dataField === name);
            if (field) {
                field.disabled = f;
            }
        });
    }
    disableAll(f = true) {
        if (f) {
            this.backUpDisables = {};
            _.forEach(this.fields, field => {
                if (field.disabled) {
                    this.backUpDisables[field.dataField] = true;
                }
                field.disabled = true;
                const ctr = this.getFormControl(field.dataField);
                if (ctr) {
                    ctr.disable({ onlySelf: true });
                }
            });
            this.triggerRender();
            return;
        }
        _.forEach(this.fields, field => {
            const ctr = this.getFormControl(field.dataField);
            if (ctr) {
                const backUp = this.backUpDisables[field.dataField];
                if (backUp) {
                    ctr.disable({ onlySelf: true });
                    field.disabled = true;
                }
                else {
                    ctr.enable({ onlySelf: true });
                    field.disabled = false;
                }
            }
        });
        this.triggerRender();
    }
    hiddenFields(fields) {
        _.forEach(fields, field => {
            this.getField(field).hidden = true;
        });
    }
    showFields(fields) {
        _.forEach(fields, field => {
            this.getField(field).hidden = false;
        });
    }
    setHidden(fields, hiddens) {
        _.forEach(fields, (field, idx) => {
            this.getField(field).hidden = hiddens[idx];
        });
    }
    setShow(fields, shows) {
        _.forEach(fields, (field, idx) => {
            this.getField(field).hidden = !shows[idx];
        });
    }
    fieldValueChanges(name, time = 100) {
        var _a;
        return (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(name).valueChanges.pipe(debounceTime(time));
    }
    valueChanges(time = 100) {
        var _a;
        return (_a = this.form) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(debounceTime(time));
    }
    patchValue(value) {
        Object.keys(value).forEach(name => {
            const f = this.form.get(name);
            if (f) {
                f.patchValue(value[name]);
            }
        });
        this.triggerRender();
    }
    triggerRender() {
        setTimeout(() => {
            this.render$.next(Number(new Date()));
        }, 500);
    }
    subRender(cdr, destroy$) {
        this.render$.pipe(filter(s => s > 0)).pipe(debounceTime(111))
            .pipe(takeUntil(destroy$))
            .subscribe(d => {
            cdr.detectChanges();
        });
    }
    addControls(controls, indexBegin = null) {
        if (indexBegin === null) {
            this.fields = _.concat(this.fields, controls);
        }
        else {
            this.fields = _.flatMap(this.fields, (value, index) => {
                if (index === indexBegin) {
                    return [...controls, value];
                }
                return value;
            });
        }
        this.rebuilder();
    }
    rebuilder() {
        setTimeout(() => {
            this.rebuilder$.next(Number(new Date()));
        });
    }
    search() {
        if (this.searchEvent$) {
            this.searchEvent$.next(this.value);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,